<?php
namespace Services\Member;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class RetCode {
  const SUCCESS = 0;
  const PARAM_ERROR = 1000;
  const ACCESS_DENY = 1001;
  const SYSTEM_ERROR = 1002;
  const DATABASE_ERROR = 1003;
  const BUSINESS_ERROR = 2000;
  static public $__names = array(
    0 => 'SUCCESS',
    1000 => 'PARAM_ERROR',
    1001 => 'ACCESS_DENY',
    1002 => 'SYSTEM_ERROR',
    1003 => 'DATABASE_ERROR',
    2000 => 'BUSINESS_ERROR',
  );
}

class User {
  static $_TSPEC;

  /**
   * @var int
   */
  public $user_id = null;
  /**
   * @var int
   */
  public $is_anonymous = null;
  /**
   * @var string
   */
  public $username = null;
  /**
   * @var string
   */
  public $nickname = null;
  /**
   * @var string
   */
  public $mail = null;
  /**
   * @var string
   */
  public $mobile = null;
  /**
   * @var int
   */
  public $bind_qq = null;
  /**
   * @var int
   */
  public $bind_weixin = null;
  /**
   * @var int
   */
  public $bind_weibo = null;
  /**
   * @var int
   */
  public $bind_qqweibo = null;
  /**
   * @var string
   */
  public $avatar_url = null;
  /**
   * @var string
   */
  public $password = null;
  /**
   * @var string
   */
  public $password_salt = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $reg_from = null;
  /**
   * @var string
   */
  public $last_login_time = null;
  /**
   * @var string
   */
  public $last_login_device = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'is_anonymous',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'nickname',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'mail',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'bind_qq',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'bind_weixin',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'bind_weibo',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'bind_qqweibo',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'avatar_url',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'password_salt',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'status',
          'type' => TType::I64,
          ),
        15 => array(
          'var' => 'reg_from',
          'type' => TType::I64,
          ),
        16 => array(
          'var' => 'last_login_time',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'last_login_device',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['user_id'])) {
        $this->user_id = $vals['user_id'];
      }
      if (isset($vals['is_anonymous'])) {
        $this->is_anonymous = $vals['is_anonymous'];
      }
      if (isset($vals['username'])) {
        $this->username = $vals['username'];
      }
      if (isset($vals['nickname'])) {
        $this->nickname = $vals['nickname'];
      }
      if (isset($vals['mail'])) {
        $this->mail = $vals['mail'];
      }
      if (isset($vals['mobile'])) {
        $this->mobile = $vals['mobile'];
      }
      if (isset($vals['bind_qq'])) {
        $this->bind_qq = $vals['bind_qq'];
      }
      if (isset($vals['bind_weixin'])) {
        $this->bind_weixin = $vals['bind_weixin'];
      }
      if (isset($vals['bind_weibo'])) {
        $this->bind_weibo = $vals['bind_weibo'];
      }
      if (isset($vals['bind_qqweibo'])) {
        $this->bind_qqweibo = $vals['bind_qqweibo'];
      }
      if (isset($vals['avatar_url'])) {
        $this->avatar_url = $vals['avatar_url'];
      }
      if (isset($vals['password'])) {
        $this->password = $vals['password'];
      }
      if (isset($vals['password_salt'])) {
        $this->password_salt = $vals['password_salt'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['reg_from'])) {
        $this->reg_from = $vals['reg_from'];
      }
      if (isset($vals['last_login_time'])) {
        $this->last_login_time = $vals['last_login_time'];
      }
      if (isset($vals['last_login_device'])) {
        $this->last_login_device = $vals['last_login_device'];
      }
    }
  }

  public function getName() {
    return 'User';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->user_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->is_anonymous);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->username);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nickname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mobile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->bind_qq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->bind_weixin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->bind_weibo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->bind_qqweibo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->avatar_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->password);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->password_salt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->reg_from);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->last_login_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->last_login_device);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('User');
    if ($this->user_id !== null) {
      $xfer += $output->writeFieldBegin('user_id', TType::I64, 1);
      $xfer += $output->writeI64($this->user_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_anonymous !== null) {
      $xfer += $output->writeFieldBegin('is_anonymous', TType::I64, 2);
      $xfer += $output->writeI64($this->is_anonymous);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->username !== null) {
      $xfer += $output->writeFieldBegin('username', TType::STRING, 3);
      $xfer += $output->writeString($this->username);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nickname !== null) {
      $xfer += $output->writeFieldBegin('nickname', TType::STRING, 4);
      $xfer += $output->writeString($this->nickname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mail !== null) {
      $xfer += $output->writeFieldBegin('mail', TType::STRING, 5);
      $xfer += $output->writeString($this->mail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mobile !== null) {
      $xfer += $output->writeFieldBegin('mobile', TType::STRING, 6);
      $xfer += $output->writeString($this->mobile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bind_qq !== null) {
      $xfer += $output->writeFieldBegin('bind_qq', TType::I64, 7);
      $xfer += $output->writeI64($this->bind_qq);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bind_weixin !== null) {
      $xfer += $output->writeFieldBegin('bind_weixin', TType::I64, 8);
      $xfer += $output->writeI64($this->bind_weixin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bind_weibo !== null) {
      $xfer += $output->writeFieldBegin('bind_weibo', TType::I64, 9);
      $xfer += $output->writeI64($this->bind_weibo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bind_qqweibo !== null) {
      $xfer += $output->writeFieldBegin('bind_qqweibo', TType::I64, 10);
      $xfer += $output->writeI64($this->bind_qqweibo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->avatar_url !== null) {
      $xfer += $output->writeFieldBegin('avatar_url', TType::STRING, 11);
      $xfer += $output->writeString($this->avatar_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->password !== null) {
      $xfer += $output->writeFieldBegin('password', TType::STRING, 12);
      $xfer += $output->writeString($this->password);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->password_salt !== null) {
      $xfer += $output->writeFieldBegin('password_salt', TType::STRING, 13);
      $xfer += $output->writeString($this->password_salt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I64, 14);
      $xfer += $output->writeI64($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reg_from !== null) {
      $xfer += $output->writeFieldBegin('reg_from', TType::I64, 15);
      $xfer += $output->writeI64($this->reg_from);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->last_login_time !== null) {
      $xfer += $output->writeFieldBegin('last_login_time', TType::STRING, 16);
      $xfer += $output->writeString($this->last_login_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->last_login_device !== null) {
      $xfer += $output->writeFieldBegin('last_login_device', TType::STRING, 17);
      $xfer += $output->writeString($this->last_login_device);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Kid {
  static $_TSPEC;

  /**
   * @var int
   */
  public $kid_id = null;
  /**
   * @var int
   */
  public $user_id = null;
  /**
   * @var string
   */
  public $kid_name = null;
  /**
   * @var string
   */
  public $kid_birthday = null;
  /**
   * @var int
   */
  public $kid_gender = null;
  /**
   * @var string
   */
  public $avatar_url = null;
  /**
   * @var string
   */
  public $inKindergarten_time = null;
  /**
   * @var int
   */
  public $grade = null;
  /**
   * @var string
   */
  public $grade_label = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'kid_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'kid_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'kid_birthday',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'kid_gender',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'avatar_url',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'inKindergarten_time',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'grade',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'grade_label',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['kid_id'])) {
        $this->kid_id = $vals['kid_id'];
      }
      if (isset($vals['user_id'])) {
        $this->user_id = $vals['user_id'];
      }
      if (isset($vals['kid_name'])) {
        $this->kid_name = $vals['kid_name'];
      }
      if (isset($vals['kid_birthday'])) {
        $this->kid_birthday = $vals['kid_birthday'];
      }
      if (isset($vals['kid_gender'])) {
        $this->kid_gender = $vals['kid_gender'];
      }
      if (isset($vals['avatar_url'])) {
        $this->avatar_url = $vals['avatar_url'];
      }
      if (isset($vals['inKindergarten_time'])) {
        $this->inKindergarten_time = $vals['inKindergarten_time'];
      }
      if (isset($vals['grade'])) {
        $this->grade = $vals['grade'];
      }
      if (isset($vals['grade_label'])) {
        $this->grade_label = $vals['grade_label'];
      }
    }
  }

  public function getName() {
    return 'Kid';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->kid_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->user_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->kid_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->kid_birthday);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->kid_gender);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->avatar_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->inKindergarten_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->grade);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->grade_label);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Kid');
    if ($this->kid_id !== null) {
      $xfer += $output->writeFieldBegin('kid_id', TType::I64, 1);
      $xfer += $output->writeI64($this->kid_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_id !== null) {
      $xfer += $output->writeFieldBegin('user_id', TType::I64, 2);
      $xfer += $output->writeI64($this->user_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->kid_name !== null) {
      $xfer += $output->writeFieldBegin('kid_name', TType::STRING, 3);
      $xfer += $output->writeString($this->kid_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->kid_birthday !== null) {
      $xfer += $output->writeFieldBegin('kid_birthday', TType::STRING, 4);
      $xfer += $output->writeString($this->kid_birthday);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->kid_gender !== null) {
      $xfer += $output->writeFieldBegin('kid_gender', TType::I64, 5);
      $xfer += $output->writeI64($this->kid_gender);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->avatar_url !== null) {
      $xfer += $output->writeFieldBegin('avatar_url', TType::STRING, 6);
      $xfer += $output->writeString($this->avatar_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->inKindergarten_time !== null) {
      $xfer += $output->writeFieldBegin('inKindergarten_time', TType::STRING, 7);
      $xfer += $output->writeString($this->inKindergarten_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->grade !== null) {
      $xfer += $output->writeFieldBegin('grade', TType::I32, 8);
      $xfer += $output->writeI32($this->grade);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->grade_label !== null) {
      $xfer += $output->writeFieldBegin('grade_label', TType::STRING, 9);
      $xfer += $output->writeString($this->grade_label);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Token {
  static $_TSPEC;

  /**
   * @var int
   */
  public $user_id = null;
  /**
   * @var string
   */
  public $token = null;
  /**
   * @var string
   */
  public $valid_time = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'valid_time',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['user_id'])) {
        $this->user_id = $vals['user_id'];
      }
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['valid_time'])) {
        $this->valid_time = $vals['valid_time'];
      }
    }
  }

  public function getName() {
    return 'Token';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->user_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->valid_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Token');
    if ($this->user_id !== null) {
      $xfer += $output->writeFieldBegin('user_id', TType::I64, 1);
      $xfer += $output->writeI64($this->user_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 2);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->valid_time !== null) {
      $xfer += $output->writeFieldBegin('valid_time', TType::STRING, 3);
      $xfer += $output->writeString($this->valid_time);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inviter {
  static $_TSPEC;

  /**
   * @var int
   */
  public $inviter_id = null;
  /**
   * @var int
   */
  public $count = null;
  /**
   * @var string
   */
  public $nickname = null;
  /**
   * @var string
   */
  public $avatar_url = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'inviter_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'count',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'nickname',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'avatar_url',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['inviter_id'])) {
        $this->inviter_id = $vals['inviter_id'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
      if (isset($vals['nickname'])) {
        $this->nickname = $vals['nickname'];
      }
      if (isset($vals['avatar_url'])) {
        $this->avatar_url = $vals['avatar_url'];
      }
    }
  }

  public function getName() {
    return 'Inviter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->inviter_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nickname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->avatar_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inviter');
    if ($this->inviter_id !== null) {
      $xfer += $output->writeFieldBegin('inviter_id', TType::I64, 1);
      $xfer += $output->writeI64($this->inviter_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I64, 2);
      $xfer += $output->writeI64($this->count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nickname !== null) {
      $xfer += $output->writeFieldBegin('nickname', TType::STRING, 3);
      $xfer += $output->writeString($this->nickname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->avatar_url !== null) {
      $xfer += $output->writeFieldBegin('avatar_url', TType::STRING, 4);
      $xfer += $output->writeString($this->avatar_url);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class getUserInfoRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var \Services\Member\User
   */
  public $user_info = null;
  /**
   * @var string
   */
  public $msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_info',
          'type' => TType::STRUCT,
          'class' => '\Services\Member\User',
          ),
        3 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['user_info'])) {
        $this->user_info = $vals['user_info'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
    }
  }

  public function getName() {
    return 'getUserInfoRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->user_info = new \Services\Member\User();
            $xfer += $this->user_info->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('getUserInfoRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_info !== null) {
      if (!is_object($this->user_info)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('user_info', TType::STRUCT, 2);
      $xfer += $this->user_info->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 3);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class addAnonymousRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var int
   */
  public $user_id = null;
  /**
   * @var string
   */
  public $msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['user_id'])) {
        $this->user_id = $vals['user_id'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
    }
  }

  public function getName() {
    return 'addAnonymousRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->user_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('addAnonymousRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_id !== null) {
      $xfer += $output->writeFieldBegin('user_id', TType::I64, 2);
      $xfer += $output->writeI64($this->user_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 3);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class addKidInfoRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var int
   */
  public $kid_id = null;
  /**
   * @var string
   */
  public $msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'kid_id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['kid_id'])) {
        $this->kid_id = $vals['kid_id'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
    }
  }

  public function getName() {
    return 'addKidInfoRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->kid_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('addKidInfoRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->kid_id !== null) {
      $xfer += $output->writeFieldBegin('kid_id', TType::I64, 2);
      $xfer += $output->writeI64($this->kid_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 3);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class getKidsRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var string
   */
  public $kids = null;
  /**
   * @var string
   */
  public $msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'kids',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['kids'])) {
        $this->kids = $vals['kids'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
    }
  }

  public function getName() {
    return 'getKidsRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->kids);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('getKidsRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->kids !== null) {
      $xfer += $output->writeFieldBegin('kids', TType::STRING, 2);
      $xfer += $output->writeString($this->kids);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 3);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class isBindRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var int
   */
  public $isbind = null;
  /**
   * @var int
   */
  public $user_id = null;
  /**
   * @var string
   */
  public $msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'isbind',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'user_id',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['isbind'])) {
        $this->isbind = $vals['isbind'];
      }
      if (isset($vals['user_id'])) {
        $this->user_id = $vals['user_id'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
    }
  }

  public function getName() {
    return 'isBindRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->isbind);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->user_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('isBindRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isbind !== null) {
      $xfer += $output->writeFieldBegin('isbind', TType::I64, 2);
      $xfer += $output->writeI64($this->isbind);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_id !== null) {
      $xfer += $output->writeFieldBegin('user_id', TType::I64, 3);
      $xfer += $output->writeI64($this->user_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 4);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class bindRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var string
   */
  public $msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
    }
  }

  public function getName() {
    return 'bindRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('bindRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class unBindRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var string
   */
  public $msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
    }
  }

  public function getName() {
    return 'unBindRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('unBindRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loginRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var \Services\Member\User
   */
  public $user_info = null;
  /**
   * @var string
   */
  public $msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_info',
          'type' => TType::STRUCT,
          'class' => '\Services\Member\User',
          ),
        3 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['user_info'])) {
        $this->user_info = $vals['user_info'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
    }
  }

  public function getName() {
    return 'loginRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->user_info = new \Services\Member\User();
            $xfer += $this->user_info->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loginRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_info !== null) {
      if (!is_object($this->user_info)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('user_info', TType::STRUCT, 2);
      $xfer += $this->user_info->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 3);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class getUserTokenRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var \Services\Member\Token
   */
  public $token_info = null;
  /**
   * @var string
   */
  public $msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'token_info',
          'type' => TType::STRUCT,
          'class' => '\Services\Member\Token',
          ),
        3 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['token_info'])) {
        $this->token_info = $vals['token_info'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
    }
  }

  public function getName() {
    return 'getUserTokenRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->token_info = new \Services\Member\Token();
            $xfer += $this->token_info->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('getUserTokenRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->token_info !== null) {
      if (!is_object($this->token_info)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('token_info', TType::STRUCT, 2);
      $xfer += $this->token_info->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 3);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class sendVerifyCodeRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var string
   */
  public $verifyCode = null;
  /**
   * @var string
   */
  public $msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'verifyCode',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['verifyCode'])) {
        $this->verifyCode = $vals['verifyCode'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
    }
  }

  public function getName() {
    return 'sendVerifyCodeRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->verifyCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('sendVerifyCodeRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->verifyCode !== null) {
      $xfer += $output->writeFieldBegin('verifyCode', TType::STRING, 2);
      $xfer += $output->writeString($this->verifyCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 3);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class roleRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var string
   */
  public $msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'status',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
    }
  }

  public function getName() {
    return 'roleRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('roleRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I64, 2);
      $xfer += $output->writeI64($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 3);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class getKidInfoRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var \Services\Member\Kid
   */
  public $kid_info = null;
  /**
   * @var string
   */
  public $msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'kid_info',
          'type' => TType::STRUCT,
          'class' => '\Services\Member\Kid',
          ),
        3 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['kid_info'])) {
        $this->kid_info = $vals['kid_info'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
    }
  }

  public function getName() {
    return 'getKidInfoRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->kid_info = new \Services\Member\Kid();
            $xfer += $this->kid_info->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('getKidInfoRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->kid_info !== null) {
      if (!is_object($this->kid_info)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('kid_info', TType::STRUCT, 2);
      $xfer += $this->kid_info->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 3);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class getInvationCodeRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var string
   */
  public $invation_code = null;
  /**
   * @var string
   */
  public $msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'invation_code',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['invation_code'])) {
        $this->invation_code = $vals['invation_code'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
    }
  }

  public function getName() {
    return 'getInvationCodeRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->invation_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('getInvationCodeRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invation_code !== null) {
      $xfer += $output->writeFieldBegin('invation_code', TType::STRING, 2);
      $xfer += $output->writeString($this->invation_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 3);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class getInviteUserRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var bool
   */
  public $is_invited = null;
  /**
   * @var string
   */
  public $msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'is_invited',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['is_invited'])) {
        $this->is_invited = $vals['is_invited'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
    }
  }

  public function getName() {
    return 'getInviteUserRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_invited);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('getInviteUserRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_invited !== null) {
      $xfer += $output->writeFieldBegin('is_invited', TType::BOOL, 2);
      $xfer += $output->writeBool($this->is_invited);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 3);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class getActivateInviteInfoRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var bool
   */
  public $is_activated = null;
  /**
   * @var string
   */
  public $msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'is_activated',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['is_activated'])) {
        $this->is_activated = $vals['is_activated'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
    }
  }

  public function getName() {
    return 'getActivateInviteInfoRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_activated);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('getActivateInviteInfoRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_activated !== null) {
      $xfer += $output->writeFieldBegin('is_activated', TType::BOOL, 2);
      $xfer += $output->writeBool($this->is_activated);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 3);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class getInviteCountRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var int
   */
  public $invite_count = null;
  /**
   * @var string
   */
  public $msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'invite_count',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['invite_count'])) {
        $this->invite_count = $vals['invite_count'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
    }
  }

  public function getName() {
    return 'getInviteCountRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->invite_count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('getInviteCountRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invite_count !== null) {
      $xfer += $output->writeFieldBegin('invite_count', TType::I64, 2);
      $xfer += $output->writeI64($this->invite_count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 3);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class getInviteUserListRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var \Services\Member\User[]
   */
  public $invitee_list = null;
  /**
   * @var string
   */
  public $msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'invitee_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Services\Member\User',
            ),
          ),
        3 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['invitee_list'])) {
        $this->invitee_list = $vals['invitee_list'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
    }
  }

  public function getName() {
    return 'getInviteUserListRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->invitee_list = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \Services\Member\User();
              $xfer += $elem5->read($input);
              $this->invitee_list []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('getInviteUserListRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invitee_list !== null) {
      if (!is_array($this->invitee_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('invitee_list', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->invitee_list));
        {
          foreach ($this->invitee_list as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 3);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class getInviteRankingListRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var \Services\Member\Inviter[]
   */
  public $inviter_list = null;
  /**
   * @var string
   */
  public $msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'inviter_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Services\Member\Inviter',
            ),
          ),
        3 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['inviter_list'])) {
        $this->inviter_list = $vals['inviter_list'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
    }
  }

  public function getName() {
    return 'getInviteRankingListRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->inviter_list = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new \Services\Member\Inviter();
              $xfer += $elem12->read($input);
              $this->inviter_list []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('getInviteRankingListRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->inviter_list !== null) {
      if (!is_array($this->inviter_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('inviter_list', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->inviter_list));
        {
          foreach ($this->inviter_list as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 3);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class getWeixinUnionidRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var string
   */
  public $unionid = null;
  /**
   * @var string
   */
  public $msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'unionid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['unionid'])) {
        $this->unionid = $vals['unionid'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
    }
  }

  public function getName() {
    return 'getWeixinUnionidRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->unionid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('getWeixinUnionidRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->unionid !== null) {
      $xfer += $output->writeFieldBegin('unionid', TType::STRING, 2);
      $xfer += $output->writeString($this->unionid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 3);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class delKidInfoRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var string
   */
  public $msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
    }
  }

  public function getName() {
    return 'delKidInfoRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('delKidInfoRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


