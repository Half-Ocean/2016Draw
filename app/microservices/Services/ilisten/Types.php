<?php
namespace Services\ilisten;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class RetCode {
  const SUCCESS = 0;
  const PARAM_ERROR = 1000;
  const ACCESS_DENY = 1001;
  const SYSTEM_ERROR = 1002;
  const DATABASE_ERROR = 1003;
  const BUSINESS_ERROR = 2000;
  static public $__names = array(
    0 => 'SUCCESS',
    1000 => 'PARAM_ERROR',
    1001 => 'ACCESS_DENY',
    1002 => 'SYSTEM_ERROR',
    1003 => 'DATABASE_ERROR',
    2000 => 'BUSINESS_ERROR',
  );
}

class User {
  static $_TSPEC;

  /**
   * @var int
   */
  public $user_id = null;
  /**
   * @var string
   */
  public $nickname = null;
  /**
   * @var string
   */
  public $email = null;
  /**
   * @var string
   */
  public $regdate = null;
  /**
   * @var int
   */
  public $vip = null;
  /**
   * @var int
   */
  public $gbb = null;
  /**
   * @var int
   */
  public $bk = null;
  /**
   * @var string
   */
  public $vip_valid_ts = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'nickname',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'regdate',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'vip',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'gbb',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'bk',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'vip_valid_ts',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['user_id'])) {
        $this->user_id = $vals['user_id'];
      }
      if (isset($vals['nickname'])) {
        $this->nickname = $vals['nickname'];
      }
      if (isset($vals['email'])) {
        $this->email = $vals['email'];
      }
      if (isset($vals['regdate'])) {
        $this->regdate = $vals['regdate'];
      }
      if (isset($vals['vip'])) {
        $this->vip = $vals['vip'];
      }
      if (isset($vals['gbb'])) {
        $this->gbb = $vals['gbb'];
      }
      if (isset($vals['bk'])) {
        $this->bk = $vals['bk'];
      }
      if (isset($vals['vip_valid_ts'])) {
        $this->vip_valid_ts = $vals['vip_valid_ts'];
      }
    }
  }

  public function getName() {
    return 'User';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->user_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nickname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->regdate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->vip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->gbb);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->bk);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->vip_valid_ts);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('User');
    if ($this->user_id !== null) {
      $xfer += $output->writeFieldBegin('user_id', TType::I64, 1);
      $xfer += $output->writeI64($this->user_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nickname !== null) {
      $xfer += $output->writeFieldBegin('nickname', TType::STRING, 2);
      $xfer += $output->writeString($this->nickname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->email !== null) {
      $xfer += $output->writeFieldBegin('email', TType::STRING, 3);
      $xfer += $output->writeString($this->email);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->regdate !== null) {
      $xfer += $output->writeFieldBegin('regdate', TType::STRING, 4);
      $xfer += $output->writeString($this->regdate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vip !== null) {
      $xfer += $output->writeFieldBegin('vip', TType::I64, 5);
      $xfer += $output->writeI64($this->vip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gbb !== null) {
      $xfer += $output->writeFieldBegin('gbb', TType::I64, 6);
      $xfer += $output->writeI64($this->gbb);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bk !== null) {
      $xfer += $output->writeFieldBegin('bk', TType::I64, 7);
      $xfer += $output->writeI64($this->bk);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vip_valid_ts !== null) {
      $xfer += $output->writeFieldBegin('vip_valid_ts', TType::STRING, 8);
      $xfer += $output->writeString($this->vip_valid_ts);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Token {
  static $_TSPEC;

  /**
   * @var int
   */
  public $user_id = null;
  /**
   * @var string
   */
  public $token = null;
  /**
   * @var string
   */
  public $valid_time = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'valid_time',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['user_id'])) {
        $this->user_id = $vals['user_id'];
      }
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['valid_time'])) {
        $this->valid_time = $vals['valid_time'];
      }
    }
  }

  public function getName() {
    return 'Token';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->user_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->valid_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Token');
    if ($this->user_id !== null) {
      $xfer += $output->writeFieldBegin('user_id', TType::I64, 1);
      $xfer += $output->writeI64($this->user_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 2);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->valid_time !== null) {
      $xfer += $output->writeFieldBegin('valid_time', TType::STRING, 3);
      $xfer += $output->writeString($this->valid_time);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Entrance {
  static $_TSPEC;

  /**
   * @var int
   */
  public $config_id = null;
  /**
   * @var string
   */
  public $entrance_name = null;
  /**
   * @var string
   */
  public $entrance_icon = null;
  /**
   * @var string
   */
  public $target_url = null;
  /**
   * @var int
   */
  public $order_no = null;
  /**
   * @var string
   */
  public $age_from = null;
  /**
   * @var string
   */
  public $age_to = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'config_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'entrance_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'entrance_icon',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'target_url',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'order_no',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'age_from',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'age_to',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['config_id'])) {
        $this->config_id = $vals['config_id'];
      }
      if (isset($vals['entrance_name'])) {
        $this->entrance_name = $vals['entrance_name'];
      }
      if (isset($vals['entrance_icon'])) {
        $this->entrance_icon = $vals['entrance_icon'];
      }
      if (isset($vals['target_url'])) {
        $this->target_url = $vals['target_url'];
      }
      if (isset($vals['order_no'])) {
        $this->order_no = $vals['order_no'];
      }
      if (isset($vals['age_from'])) {
        $this->age_from = $vals['age_from'];
      }
      if (isset($vals['age_to'])) {
        $this->age_to = $vals['age_to'];
      }
    }
  }

  public function getName() {
    return 'Entrance';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->config_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->entrance_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->entrance_icon);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->target_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->order_no);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->age_from);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->age_to);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Entrance');
    if ($this->config_id !== null) {
      $xfer += $output->writeFieldBegin('config_id', TType::I64, 1);
      $xfer += $output->writeI64($this->config_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->entrance_name !== null) {
      $xfer += $output->writeFieldBegin('entrance_name', TType::STRING, 2);
      $xfer += $output->writeString($this->entrance_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->entrance_icon !== null) {
      $xfer += $output->writeFieldBegin('entrance_icon', TType::STRING, 3);
      $xfer += $output->writeString($this->entrance_icon);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->target_url !== null) {
      $xfer += $output->writeFieldBegin('target_url', TType::STRING, 4);
      $xfer += $output->writeString($this->target_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->order_no !== null) {
      $xfer += $output->writeFieldBegin('order_no', TType::I64, 5);
      $xfer += $output->writeI64($this->order_no);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->age_from !== null) {
      $xfer += $output->writeFieldBegin('age_from', TType::STRING, 6);
      $xfer += $output->writeString($this->age_from);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->age_to !== null) {
      $xfer += $output->writeFieldBegin('age_to', TType::STRING, 7);
      $xfer += $output->writeString($this->age_to);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Order {
  static $_TSPEC;

  /**
   * @var int
   */
  public $order_id = null;
  /**
   * @var string
   */
  public $good_type = null;
  /**
   * @var int
   */
  public $good_id = null;
  /**
   * @var string
   */
  public $good_name = null;
  /**
   * @var int
   */
  public $good_quantity = null;
  /**
   * @var int
   */
  public $good_price = null;
  /**
   * @var int
   */
  public $order_price = null;
  /**
   * @var int
   */
  public $order_pay_status = null;
  /**
   * @var string
   */
  public $last_pay_time = null;
  /**
   * @var string
   */
  public $last_pay_method = null;
  /**
   * @var string
   */
  public $last_pay_way = null;
  /**
   * @var int
   */
  public $ext_int1 = null;
  /**
   * @var string
   */
  public $ext_str1 = null;
  /**
   * @var string
   */
  public $create_ts = null;
  /**
   * @var string
   */
  public $update_ts = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'good_type',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'good_id',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'good_name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'good_quantity',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'good_price',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'order_price',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'order_pay_status',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'last_pay_time',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'last_pay_method',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'last_pay_way',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'ext_int1',
          'type' => TType::I64,
          ),
        13 => array(
          'var' => 'ext_str1',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'create_ts',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'update_ts',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['order_id'])) {
        $this->order_id = $vals['order_id'];
      }
      if (isset($vals['good_type'])) {
        $this->good_type = $vals['good_type'];
      }
      if (isset($vals['good_id'])) {
        $this->good_id = $vals['good_id'];
      }
      if (isset($vals['good_name'])) {
        $this->good_name = $vals['good_name'];
      }
      if (isset($vals['good_quantity'])) {
        $this->good_quantity = $vals['good_quantity'];
      }
      if (isset($vals['good_price'])) {
        $this->good_price = $vals['good_price'];
      }
      if (isset($vals['order_price'])) {
        $this->order_price = $vals['order_price'];
      }
      if (isset($vals['order_pay_status'])) {
        $this->order_pay_status = $vals['order_pay_status'];
      }
      if (isset($vals['last_pay_time'])) {
        $this->last_pay_time = $vals['last_pay_time'];
      }
      if (isset($vals['last_pay_method'])) {
        $this->last_pay_method = $vals['last_pay_method'];
      }
      if (isset($vals['last_pay_way'])) {
        $this->last_pay_way = $vals['last_pay_way'];
      }
      if (isset($vals['ext_int1'])) {
        $this->ext_int1 = $vals['ext_int1'];
      }
      if (isset($vals['ext_str1'])) {
        $this->ext_str1 = $vals['ext_str1'];
      }
      if (isset($vals['create_ts'])) {
        $this->create_ts = $vals['create_ts'];
      }
      if (isset($vals['update_ts'])) {
        $this->update_ts = $vals['update_ts'];
      }
    }
  }

  public function getName() {
    return 'Order';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->order_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->good_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->good_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->good_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->good_quantity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->good_price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->order_price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->order_pay_status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->last_pay_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->last_pay_method);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->last_pay_way);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ext_int1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ext_str1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->create_ts);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->update_ts);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Order');
    if ($this->order_id !== null) {
      $xfer += $output->writeFieldBegin('order_id', TType::I64, 1);
      $xfer += $output->writeI64($this->order_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->good_type !== null) {
      $xfer += $output->writeFieldBegin('good_type', TType::STRING, 2);
      $xfer += $output->writeString($this->good_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->good_id !== null) {
      $xfer += $output->writeFieldBegin('good_id', TType::I64, 3);
      $xfer += $output->writeI64($this->good_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->good_name !== null) {
      $xfer += $output->writeFieldBegin('good_name', TType::STRING, 4);
      $xfer += $output->writeString($this->good_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->good_quantity !== null) {
      $xfer += $output->writeFieldBegin('good_quantity', TType::I64, 5);
      $xfer += $output->writeI64($this->good_quantity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->good_price !== null) {
      $xfer += $output->writeFieldBegin('good_price', TType::I64, 6);
      $xfer += $output->writeI64($this->good_price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->order_price !== null) {
      $xfer += $output->writeFieldBegin('order_price', TType::I64, 7);
      $xfer += $output->writeI64($this->order_price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->order_pay_status !== null) {
      $xfer += $output->writeFieldBegin('order_pay_status', TType::I64, 8);
      $xfer += $output->writeI64($this->order_pay_status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->last_pay_time !== null) {
      $xfer += $output->writeFieldBegin('last_pay_time', TType::STRING, 9);
      $xfer += $output->writeString($this->last_pay_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->last_pay_method !== null) {
      $xfer += $output->writeFieldBegin('last_pay_method', TType::STRING, 10);
      $xfer += $output->writeString($this->last_pay_method);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->last_pay_way !== null) {
      $xfer += $output->writeFieldBegin('last_pay_way', TType::STRING, 11);
      $xfer += $output->writeString($this->last_pay_way);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ext_int1 !== null) {
      $xfer += $output->writeFieldBegin('ext_int1', TType::I64, 12);
      $xfer += $output->writeI64($this->ext_int1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ext_str1 !== null) {
      $xfer += $output->writeFieldBegin('ext_str1', TType::STRING, 13);
      $xfer += $output->writeString($this->ext_str1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->create_ts !== null) {
      $xfer += $output->writeFieldBegin('create_ts', TType::STRING, 14);
      $xfer += $output->writeString($this->create_ts);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->update_ts !== null) {
      $xfer += $output->writeFieldBegin('update_ts', TType::STRING, 15);
      $xfer += $output->writeString($this->update_ts);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class getUserInfoRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var \Services\ilisten\User
   */
  public $user_info = null;
  /**
   * @var string
   */
  public $msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_info',
          'type' => TType::STRUCT,
          'class' => '\Services\ilisten\User',
          ),
        3 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['user_info'])) {
        $this->user_info = $vals['user_info'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
    }
  }

  public function getName() {
    return 'getUserInfoRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->user_info = new \Services\ilisten\User();
            $xfer += $this->user_info->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('getUserInfoRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_info !== null) {
      if (!is_object($this->user_info)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('user_info', TType::STRUCT, 2);
      $xfer += $this->user_info->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 3);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class getTokenInfoRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var \Services\ilisten\Token
   */
  public $token_info = null;
  /**
   * @var string
   */
  public $msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'token_info',
          'type' => TType::STRUCT,
          'class' => '\Services\ilisten\Token',
          ),
        3 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['token_info'])) {
        $this->token_info = $vals['token_info'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
    }
  }

  public function getName() {
    return 'getTokenInfoRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->token_info = new \Services\ilisten\Token();
            $xfer += $this->token_info->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('getTokenInfoRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->token_info !== null) {
      if (!is_object($this->token_info)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('token_info', TType::STRUCT, 2);
      $xfer += $this->token_info->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 3);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class getUpdateUserStatusRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var int
   */
  public $is_update = null;
  /**
   * @var string
   */
  public $msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'is_update',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['is_update'])) {
        $this->is_update = $vals['is_update'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
    }
  }

  public function getName() {
    return 'getUpdateUserStatusRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->is_update);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('getUpdateUserStatusRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_update !== null) {
      $xfer += $output->writeFieldBegin('is_update', TType::I64, 2);
      $xfer += $output->writeI64($this->is_update);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 3);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class buyVipRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var string
   */
  public $msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
    }
  }

  public function getName() {
    return 'buyVipRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('buyVipRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class getInvationRewardRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var string
   */
  public $msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
    }
  }

  public function getName() {
    return 'getInvationRewardRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('getInvationRewardRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class getEntrancesListRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var \Services\ilisten\Entrance[]
   */
  public $entrance_list = null;
  /**
   * @var string
   */
  public $msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'entrance_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Services\ilisten\Entrance',
            ),
          ),
        3 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['entrance_list'])) {
        $this->entrance_list = $vals['entrance_list'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
    }
  }

  public function getName() {
    return 'getEntrancesListRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->entrance_list = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \Services\ilisten\Entrance();
              $xfer += $elem5->read($input);
              $this->entrance_list []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('getEntrancesListRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->entrance_list !== null) {
      if (!is_array($this->entrance_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('entrance_list', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->entrance_list));
        {
          foreach ($this->entrance_list as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 3);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class getInviteUserBkCountRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var int
   */
  public $inviter_bk = null;
  /**
   * @var int
   */
  public $invitee_bk = null;
  /**
   * @var int
   */
  public $invitee_goods_id = null;
  /**
   * @var int
   */
  public $invitee_goods_quantity = null;
  /**
   * @var string
   */
  public $invitee_goods_name = null;
  /**
   * @var string
   */
  public $msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'inviter_bk',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'invitee_bk',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'invitee_goods_id',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'invitee_goods_quantity',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'invitee_goods_name',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['inviter_bk'])) {
        $this->inviter_bk = $vals['inviter_bk'];
      }
      if (isset($vals['invitee_bk'])) {
        $this->invitee_bk = $vals['invitee_bk'];
      }
      if (isset($vals['invitee_goods_id'])) {
        $this->invitee_goods_id = $vals['invitee_goods_id'];
      }
      if (isset($vals['invitee_goods_quantity'])) {
        $this->invitee_goods_quantity = $vals['invitee_goods_quantity'];
      }
      if (isset($vals['invitee_goods_name'])) {
        $this->invitee_goods_name = $vals['invitee_goods_name'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
    }
  }

  public function getName() {
    return 'getInviteUserBkCountRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->inviter_bk);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->invitee_bk);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->invitee_goods_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->invitee_goods_quantity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->invitee_goods_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('getInviteUserBkCountRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->inviter_bk !== null) {
      $xfer += $output->writeFieldBegin('inviter_bk', TType::I64, 2);
      $xfer += $output->writeI64($this->inviter_bk);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invitee_bk !== null) {
      $xfer += $output->writeFieldBegin('invitee_bk', TType::I64, 3);
      $xfer += $output->writeI64($this->invitee_bk);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invitee_goods_id !== null) {
      $xfer += $output->writeFieldBegin('invitee_goods_id', TType::I64, 4);
      $xfer += $output->writeI64($this->invitee_goods_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invitee_goods_quantity !== null) {
      $xfer += $output->writeFieldBegin('invitee_goods_quantity', TType::I64, 5);
      $xfer += $output->writeI64($this->invitee_goods_quantity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invitee_goods_name !== null) {
      $xfer += $output->writeFieldBegin('invitee_goods_name', TType::STRING, 6);
      $xfer += $output->writeString($this->invitee_goods_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 7);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class getOrderInfoRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var \Services\ilisten\Order
   */
  public $order_info = null;
  /**
   * @var string
   */
  public $msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'order_info',
          'type' => TType::STRUCT,
          'class' => '\Services\ilisten\Order',
          ),
        6 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['order_info'])) {
        $this->order_info = $vals['order_info'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
    }
  }

  public function getName() {
    return 'getOrderInfoRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->order_info = new \Services\ilisten\Order();
            $xfer += $this->order_info->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('getOrderInfoRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->order_info !== null) {
      if (!is_object($this->order_info)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('order_info', TType::STRUCT, 2);
      $xfer += $this->order_info->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 6);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


