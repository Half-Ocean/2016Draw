<?php
namespace Services\xnd;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class RetCode {
  const SUCCESS = 0;
  const PARAM_ERROR = 1000;
  const ACCESS_DENY = 1001;
  const SYSTEM_ERROR = 1002;
  const DATABASE_ERROR = 1003;
  const BUSINESS_ERROR = 2000;
  static public $__names = array(
    0 => 'SUCCESS',
    1000 => 'PARAM_ERROR',
    1001 => 'ACCESS_DENY',
    1002 => 'SYSTEM_ERROR',
    1003 => 'DATABASE_ERROR',
    2000 => 'BUSINESS_ERROR',
  );
}

class Good {
  static $_TSPEC;

  /**
   * @var int
   */
  public $goods_id = null;
  /**
   * @var string
   */
  public $goods_type = null;
  /**
   * @var string
   */
  public $goods_name = null;
  /**
   * @var double
   */
  public $goods_price = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'goods_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'goods_type',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'goods_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'goods_price',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['goods_id'])) {
        $this->goods_id = $vals['goods_id'];
      }
      if (isset($vals['goods_type'])) {
        $this->goods_type = $vals['goods_type'];
      }
      if (isset($vals['goods_name'])) {
        $this->goods_name = $vals['goods_name'];
      }
      if (isset($vals['goods_price'])) {
        $this->goods_price = $vals['goods_price'];
      }
    }
  }

  public function getName() {
    return 'Good';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->goods_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->goods_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->goods_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->goods_price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Good');
    if ($this->goods_id !== null) {
      $xfer += $output->writeFieldBegin('goods_id', TType::I64, 1);
      $xfer += $output->writeI64($this->goods_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_type !== null) {
      $xfer += $output->writeFieldBegin('goods_type', TType::STRING, 2);
      $xfer += $output->writeString($this->goods_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_name !== null) {
      $xfer += $output->writeFieldBegin('goods_name', TType::STRING, 3);
      $xfer += $output->writeString($this->goods_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_price !== null) {
      $xfer += $output->writeFieldBegin('goods_price', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->goods_price);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class testRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var string
   */
  public $msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
    }
  }

  public function getName() {
    return 'testRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('testRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I64, 1);
      $xfer += $output->writeI64($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class commonRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var string
   */
  public $msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
    }
  }

  public function getName() {
    return 'commonRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('commonRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I64, 1);
      $xfer += $output->writeI64($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class countRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var int
   */
  public $count = null;
  /**
   * @var string
   */
  public $msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'count',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
    }
  }

  public function getName() {
    return 'countRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('countRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I64, 1);
      $xfer += $output->writeI64($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I64, 2);
      $xfer += $output->writeI64($this->count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 3);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class goodsListRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var \Services\xnd\Good[]
   */
  public $goods_list = null;
  /**
   * @var string
   */
  public $msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'goods_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Services\xnd\Good',
            ),
          ),
        3 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['goods_list'])) {
        $this->goods_list = $vals['goods_list'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
    }
  }

  public function getName() {
    return 'goodsListRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->goods_list = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \Services\xnd\Good();
              $xfer += $elem5->read($input);
              $this->goods_list []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('goodsListRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I64, 1);
      $xfer += $output->writeI64($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_list !== null) {
      if (!is_array($this->goods_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('goods_list', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->goods_list));
        {
          foreach ($this->goods_list as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 3);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class goodsRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var \Services\xnd\Good
   */
  public $goods_info = null;
  /**
   * @var string
   */
  public $msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'goods_info',
          'type' => TType::STRUCT,
          'class' => '\Services\xnd\Good',
          ),
        3 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['goods_info'])) {
        $this->goods_info = $vals['goods_info'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
    }
  }

  public function getName() {
    return 'goodsRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->goods_info = new \Services\xnd\Good();
            $xfer += $this->goods_info->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('goodsRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I64, 1);
      $xfer += $output->writeI64($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_info !== null) {
      if (!is_object($this->goods_info)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('goods_info', TType::STRUCT, 2);
      $xfer += $this->goods_info->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 3);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


