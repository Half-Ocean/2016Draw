<?php
namespace Services\Message;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class RetCode {
  const SUCCESS = 0;
  const PARAM_ERROR = 1000;
  const ACCESS_DENY = 1001;
  const SYSTEM_ERROR = 1002;
  const DATABASE_ERROR = 1003;
  const BUSINESS_ERROR = 2000;
  static public $__names = array(
    0 => 'SUCCESS',
    1000 => 'PARAM_ERROR',
    1001 => 'ACCESS_DENY',
    1002 => 'SYSTEM_ERROR',
    1003 => 'DATABASE_ERROR',
    2000 => 'BUSINESS_ERROR',
  );
}

class getMessageAccountRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var string
   */
  public $ret_msg = null;
  /**
   * @var string
   */
  public $client_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'ret_msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'client_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['ret_msg'])) {
        $this->ret_msg = $vals['ret_msg'];
      }
      if (isset($vals['client_id'])) {
        $this->client_id = $vals['client_id'];
      }
    }
  }

  public function getName() {
    return 'getMessageAccountRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ret_msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->client_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('getMessageAccountRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ret_msg !== null) {
      $xfer += $output->writeFieldBegin('ret_msg', TType::STRING, 2);
      $xfer += $output->writeString($this->ret_msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->client_id !== null) {
      $xfer += $output->writeFieldBegin('client_id', TType::STRING, 3);
      $xfer += $output->writeString($this->client_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class getApsAccountRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var string
   */
  public $ret_msg = null;
  /**
   * @var string
   */
  public $user_id = null;
  /**
   * @var string
   */
  public $account_type = null;
  /**
   * @var string
   */
  public $official_name = null;
  /**
   * @var string
   */
  public $official_icon = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'ret_msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'user_id',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'account_type',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'official_name',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'official_icon',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['ret_msg'])) {
        $this->ret_msg = $vals['ret_msg'];
      }
      if (isset($vals['user_id'])) {
        $this->user_id = $vals['user_id'];
      }
      if (isset($vals['account_type'])) {
        $this->account_type = $vals['account_type'];
      }
      if (isset($vals['official_name'])) {
        $this->official_name = $vals['official_name'];
      }
      if (isset($vals['official_icon'])) {
        $this->official_icon = $vals['official_icon'];
      }
    }
  }

  public function getName() {
    return 'getApsAccountRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ret_msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->user_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->account_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->official_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->official_icon);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('getApsAccountRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ret_msg !== null) {
      $xfer += $output->writeFieldBegin('ret_msg', TType::STRING, 2);
      $xfer += $output->writeString($this->ret_msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_id !== null) {
      $xfer += $output->writeFieldBegin('user_id', TType::STRING, 3);
      $xfer += $output->writeString($this->user_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->account_type !== null) {
      $xfer += $output->writeFieldBegin('account_type', TType::STRING, 4);
      $xfer += $output->writeString($this->account_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->official_name !== null) {
      $xfer += $output->writeFieldBegin('official_name', TType::STRING, 5);
      $xfer += $output->writeString($this->official_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->official_icon !== null) {
      $xfer += $output->writeFieldBegin('official_icon', TType::STRING, 6);
      $xfer += $output->writeString($this->official_icon);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class sendOfficialMsgRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var string
   */
  public $ret_msg = null;
  /**
   * @var int
   */
  public $success = null;
  /**
   * @var int
   */
  public $failure = null;
  /**
   * @var int
   */
  public $total = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'ret_msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'failure',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'total',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['ret_msg'])) {
        $this->ret_msg = $vals['ret_msg'];
      }
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['failure'])) {
        $this->failure = $vals['failure'];
      }
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
    }
  }

  public function getName() {
    return 'sendOfficialMsgRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ret_msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->failure);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('sendOfficialMsgRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ret_msg !== null) {
      $xfer += $output->writeFieldBegin('ret_msg', TType::STRING, 2);
      $xfer += $output->writeString($this->ret_msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 3);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->failure !== null) {
      $xfer += $output->writeFieldBegin('failure', TType::I32, 4);
      $xfer += $output->writeI32($this->failure);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::I32, 5);
      $xfer += $output->writeI32($this->total);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class setOnlineRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var string
   */
  public $ret_msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'ret_msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['ret_msg'])) {
        $this->ret_msg = $vals['ret_msg'];
      }
    }
  }

  public function getName() {
    return 'setOnlineRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ret_msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('setOnlineRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ret_msg !== null) {
      $xfer += $output->writeFieldBegin('ret_msg', TType::STRING, 2);
      $xfer += $output->writeString($this->ret_msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class setBlackUserRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var string
   */
  public $ret_msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'ret_msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['ret_msg'])) {
        $this->ret_msg = $vals['ret_msg'];
      }
    }
  }

  public function getName() {
    return 'setBlackUserRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ret_msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('setBlackUserRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ret_msg !== null) {
      $xfer += $output->writeFieldBegin('ret_msg', TType::STRING, 2);
      $xfer += $output->writeString($this->ret_msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class blackInfo {
  static $_TSPEC;

  /**
   * @var int
   */
  public $user_id = null;
  /**
   * @var int
   */
  public $black_userid = null;
  /**
   * @var string
   */
  public $black_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'black_userid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'black_type',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['user_id'])) {
        $this->user_id = $vals['user_id'];
      }
      if (isset($vals['black_userid'])) {
        $this->black_userid = $vals['black_userid'];
      }
      if (isset($vals['black_type'])) {
        $this->black_type = $vals['black_type'];
      }
    }
  }

  public function getName() {
    return 'blackInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->user_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->black_userid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->black_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('blackInfo');
    if ($this->user_id !== null) {
      $xfer += $output->writeFieldBegin('user_id', TType::I32, 1);
      $xfer += $output->writeI32($this->user_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->black_userid !== null) {
      $xfer += $output->writeFieldBegin('black_userid', TType::I32, 2);
      $xfer += $output->writeI32($this->black_userid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->black_type !== null) {
      $xfer += $output->writeFieldBegin('black_type', TType::STRING, 3);
      $xfer += $output->writeString($this->black_type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class getBlackListByUserIdRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var string
   */
  public $ret_msg = null;
  /**
   * @var \Services\Message\blackInfo[]
   */
  public $black_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'ret_msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'black_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Services\Message\blackInfo',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['ret_msg'])) {
        $this->ret_msg = $vals['ret_msg'];
      }
      if (isset($vals['black_list'])) {
        $this->black_list = $vals['black_list'];
      }
    }
  }

  public function getName() {
    return 'getBlackListByUserIdRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ret_msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->black_list = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \Services\Message\blackInfo();
              $xfer += $elem5->read($input);
              $this->black_list []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('getBlackListByUserIdRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ret_msg !== null) {
      $xfer += $output->writeFieldBegin('ret_msg', TType::STRING, 2);
      $xfer += $output->writeString($this->ret_msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->black_list !== null) {
      if (!is_array($this->black_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('black_list', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->black_list));
        {
          foreach ($this->black_list as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class saveOfficialMsgRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var string
   */
  public $ret_msg = null;
  /**
   * @var int
   */
  public $content_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'ret_msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'content_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['ret_msg'])) {
        $this->ret_msg = $vals['ret_msg'];
      }
      if (isset($vals['content_id'])) {
        $this->content_id = $vals['content_id'];
      }
    }
  }

  public function getName() {
    return 'saveOfficialMsgRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ret_msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->content_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('saveOfficialMsgRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ret_msg !== null) {
      $xfer += $output->writeFieldBegin('ret_msg', TType::STRING, 2);
      $xfer += $output->writeString($this->ret_msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content_id !== null) {
      $xfer += $output->writeFieldBegin('content_id', TType::I32, 3);
      $xfer += $output->writeI32($this->content_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class msgInfo {
  static $_TSPEC;

  /**
   * @var int
   */
  public $content_id = null;
  /**
   * @var int
   */
  public $official_id = null;
  /**
   * @var int
   */
  public $content_type = null;
  /**
   * @var string
   */
  public $content = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var string
   */
  public $create_time = null;
  /**
   * @var string
   */
  public $update_time = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'content_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'official_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'content_type',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'create_time',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'update_time',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['content_id'])) {
        $this->content_id = $vals['content_id'];
      }
      if (isset($vals['official_id'])) {
        $this->official_id = $vals['official_id'];
      }
      if (isset($vals['content_type'])) {
        $this->content_type = $vals['content_type'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['create_time'])) {
        $this->create_time = $vals['create_time'];
      }
      if (isset($vals['update_time'])) {
        $this->update_time = $vals['update_time'];
      }
    }
  }

  public function getName() {
    return 'msgInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->content_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->official_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->content_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->create_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->update_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('msgInfo');
    if ($this->content_id !== null) {
      $xfer += $output->writeFieldBegin('content_id', TType::I32, 1);
      $xfer += $output->writeI32($this->content_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->official_id !== null) {
      $xfer += $output->writeFieldBegin('official_id', TType::I32, 2);
      $xfer += $output->writeI32($this->official_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content_type !== null) {
      $xfer += $output->writeFieldBegin('content_type', TType::I32, 3);
      $xfer += $output->writeI32($this->content_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 4);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 5);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->create_time !== null) {
      $xfer += $output->writeFieldBegin('create_time', TType::STRING, 6);
      $xfer += $output->writeString($this->create_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->update_time !== null) {
      $xfer += $output->writeFieldBegin('update_time', TType::STRING, 7);
      $xfer += $output->writeString($this->update_time);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class getOfficialMsgRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var string
   */
  public $ret_msg = null;
  /**
   * @var \Services\Message\msgInfo[]
   */
  public $content_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'ret_msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'content_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Services\Message\msgInfo',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['ret_msg'])) {
        $this->ret_msg = $vals['ret_msg'];
      }
      if (isset($vals['content_list'])) {
        $this->content_list = $vals['content_list'];
      }
    }
  }

  public function getName() {
    return 'getOfficialMsgRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ret_msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->content_list = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new \Services\Message\msgInfo();
              $xfer += $elem12->read($input);
              $this->content_list []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('getOfficialMsgRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ret_msg !== null) {
      $xfer += $output->writeFieldBegin('ret_msg', TType::STRING, 2);
      $xfer += $output->writeString($this->ret_msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content_list !== null) {
      if (!is_array($this->content_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('content_list', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->content_list));
        {
          foreach ($this->content_list as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class getOneOfficialMsgRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var string
   */
  public $ret_msg = null;
  /**
   * @var \Services\Message\msgInfo
   */
  public $content = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'ret_msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'content',
          'type' => TType::STRUCT,
          'class' => '\Services\Message\msgInfo',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['ret_msg'])) {
        $this->ret_msg = $vals['ret_msg'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
    }
  }

  public function getName() {
    return 'getOneOfficialMsgRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ret_msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->content = new \Services\Message\msgInfo();
            $xfer += $this->content->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('getOneOfficialMsgRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ret_msg !== null) {
      $xfer += $output->writeFieldBegin('ret_msg', TType::STRING, 2);
      $xfer += $output->writeString($this->ret_msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      if (!is_object($this->content)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('content', TType::STRUCT, 3);
      $xfer += $this->content->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class followOfficialRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var string
   */
  public $ret_msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'ret_msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['ret_msg'])) {
        $this->ret_msg = $vals['ret_msg'];
      }
    }
  }

  public function getName() {
    return 'followOfficialRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ret_msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('followOfficialRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ret_msg !== null) {
      $xfer += $output->writeFieldBegin('ret_msg', TType::STRING, 2);
      $xfer += $output->writeString($this->ret_msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class unfollowOfficialRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var string
   */
  public $ret_msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'ret_msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['ret_msg'])) {
        $this->ret_msg = $vals['ret_msg'];
      }
    }
  }

  public function getName() {
    return 'unfollowOfficialRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ret_msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('unfollowOfficialRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ret_msg !== null) {
      $xfer += $output->writeFieldBegin('ret_msg', TType::STRING, 2);
      $xfer += $output->writeString($this->ret_msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class sendSystemMsgRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var string
   */
  public $ret_msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'ret_msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['ret_msg'])) {
        $this->ret_msg = $vals['ret_msg'];
      }
    }
  }

  public function getName() {
    return 'sendSystemMsgRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ret_msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('sendSystemMsgRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ret_msg !== null) {
      $xfer += $output->writeFieldBegin('ret_msg', TType::STRING, 2);
      $xfer += $output->writeString($this->ret_msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class getUserMsgCountRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var string
   */
  public $ret_msg = null;
  /**
   * @var int
   */
  public $count = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'ret_msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['ret_msg'])) {
        $this->ret_msg = $vals['ret_msg'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
    }
  }

  public function getName() {
    return 'getUserMsgCountRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ret_msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('getUserMsgCountRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ret_msg !== null) {
      $xfer += $output->writeFieldBegin('ret_msg', TType::STRING, 2);
      $xfer += $output->writeString($this->ret_msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 3);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userMsg {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var string
   */
  public $content = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $msg_type = null;
  /**
   * @var string
   */
  public $create_ts = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'status',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'msg_type',
          'type' => TType::I16,
          ),
        5 => array(
          'var' => 'create_ts',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['msg_type'])) {
        $this->msg_type = $vals['msg_type'];
      }
      if (isset($vals['create_ts'])) {
        $this->create_ts = $vals['create_ts'];
      }
    }
  }

  public function getName() {
    return 'userMsg';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->msg_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->create_ts);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userMsg');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 2);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I16, 3);
      $xfer += $output->writeI16($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg_type !== null) {
      $xfer += $output->writeFieldBegin('msg_type', TType::I16, 4);
      $xfer += $output->writeI16($this->msg_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->create_ts !== null) {
      $xfer += $output->writeFieldBegin('create_ts', TType::STRING, 5);
      $xfer += $output->writeString($this->create_ts);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class getUserMsgInfoRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var string
   */
  public $ret_msg = null;
  /**
   * @var \Services\Message\userMsg[]
   */
  public $user_msg_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'ret_msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'user_msg_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Services\Message\userMsg',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['ret_msg'])) {
        $this->ret_msg = $vals['ret_msg'];
      }
      if (isset($vals['user_msg_list'])) {
        $this->user_msg_list = $vals['user_msg_list'];
      }
    }
  }

  public function getName() {
    return 'getUserMsgInfoRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ret_msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->user_msg_list = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new \Services\Message\userMsg();
              $xfer += $elem19->read($input);
              $this->user_msg_list []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('getUserMsgInfoRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ret_msg !== null) {
      $xfer += $output->writeFieldBegin('ret_msg', TType::STRING, 2);
      $xfer += $output->writeString($this->ret_msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_msg_list !== null) {
      if (!is_array($this->user_msg_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('user_msg_list', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->user_msg_list));
        {
          foreach ($this->user_msg_list as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class getOfficialMsgCountRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var string
   */
  public $ret_msg = null;
  /**
   * @var int
   */
  public $count = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'ret_msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['ret_msg'])) {
        $this->ret_msg = $vals['ret_msg'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
    }
  }

  public function getName() {
    return 'getOfficialMsgCountRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ret_msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('getOfficialMsgCountRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ret_msg !== null) {
      $xfer += $output->writeFieldBegin('ret_msg', TType::STRING, 2);
      $xfer += $output->writeString($this->ret_msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 3);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class officialMsg {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var string
   */
  public $content = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var string
   */
  public $create_ts = null;
  /**
   * @var string
   */
  public $url = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'status',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'create_ts',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'url',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['create_ts'])) {
        $this->create_ts = $vals['create_ts'];
      }
      if (isset($vals['url'])) {
        $this->url = $vals['url'];
      }
    }
  }

  public function getName() {
    return 'officialMsg';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->create_ts);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('officialMsg');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 2);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I16, 3);
      $xfer += $output->writeI16($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->create_ts !== null) {
      $xfer += $output->writeFieldBegin('create_ts', TType::STRING, 4);
      $xfer += $output->writeString($this->create_ts);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->url !== null) {
      $xfer += $output->writeFieldBegin('url', TType::STRING, 5);
      $xfer += $output->writeString($this->url);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class getOfficialMsgInfoRet {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret_code = null;
  /**
   * @var string
   */
  public $ret_msg = null;
  /**
   * @var \Services\Message\officialMsg[]
   */
  public $official_msg_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'ret_msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'official_msg_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Services\Message\officialMsg',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['ret_msg'])) {
        $this->ret_msg = $vals['ret_msg'];
      }
      if (isset($vals['official_msg_list'])) {
        $this->official_msg_list = $vals['official_msg_list'];
      }
    }
  }

  public function getName() {
    return 'getOfficialMsgInfoRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ret_msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->official_msg_list = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $elem26 = new \Services\Message\officialMsg();
              $xfer += $elem26->read($input);
              $this->official_msg_list []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('getOfficialMsgInfoRet');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ret_msg !== null) {
      $xfer += $output->writeFieldBegin('ret_msg', TType::STRING, 2);
      $xfer += $output->writeString($this->ret_msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->official_msg_list !== null) {
      if (!is_array($this->official_msg_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('official_msg_list', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->official_msg_list));
        {
          foreach ($this->official_msg_list as $iter27)
          {
            $xfer += $iter27->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


